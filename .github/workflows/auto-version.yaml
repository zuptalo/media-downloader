name: Auto Version

on:
  workflow_run:
    workflows: [ "Build and Push Docker Image" ]
    types:
      - completed
    branches: [ "main" ]

jobs:
  wait-for-builds:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Wait for Docker Hub build
        uses: actions/github-script@v7
        with:
          script: |
            const maxAttempts = 30; // 5 minutes maximum wait time
            const waitTime = 10000; // 10 seconds between checks
            
            for (let attempt = 0; attempt < maxAttempts; attempt++) {
              console.log(`Checking Docker Hub build status (attempt ${attempt + 1}/${maxAttempts})`);
            
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'dockerhub.yaml',
                branch: 'main',
                per_page: 1
              });
            
              if (runs.data.workflow_runs.length > 0) {
                const run = runs.data.workflow_runs[0];
                if (run.status === 'completed') {
                  if (run.conclusion === 'success') {
                    console.log('Docker Hub build succeeded');
                    return;
                  } else {
                    throw new Error(`Docker Hub build failed with conclusion: ${run.conclusion}`);
                  }
                }
              }
            
              await new Promise(resolve => setTimeout(resolve, waitTime));
            }
            
            throw new Error('Timeout waiting for Docker Hub build');

  auto-version:
    needs: wait-for-builds
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Git Config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get latest tag, default to v0.0.0 if none exists
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          
          # Extract version numbers
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          
          # Increment patch version
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "Previous version: $latest_tag"
          echo "New version: $new_version"

      - name: Update CHANGELOG
        run: |
          # Initialize CHANGELOG.md if it doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Get commit messages since last tag or from the beginning if no tags exist
          if [ "${{ env.LATEST_TAG }}" = "v0.0.0" ]; then
            changes=$(git log --pretty=format:"- %s")
          else
            changes=$(git log --pretty=format:"- %s" ${{ env.LATEST_TAG }}..HEAD)
          fi
          
          # Create new version section in CHANGELOG
          DATE=$(date +%Y-%m-%d)
          {
            echo -e "\n## [${NEW_VERSION#v}] - $DATE"
            echo "### Changes"
            echo "$changes"
            echo
            cat CHANGELOG.md
          } > CHANGELOG.new
          mv CHANGELOG.new CHANGELOG.md
          
          # Commit CHANGELOG
          git add CHANGELOG.md
          git commit -m "docs: update changelog for version ${{ env.NEW_VERSION }}"
          git push

      - name: Create and push new tag
        run: |
          git tag -a ${{ env.NEW_VERSION }} -m "Release ${{ env.NEW_VERSION }}"
          git push origin ${{ env.NEW_VERSION }}